define(["durandal/system"], function (e) { return { typeAttribute: "type", space: void 0, replacer: function (e, r) { if (e) { var t = e[0]; if ("_" === t || "$" === t) return void 0 } return r }, serialize: function (r, t) { return t = void 0 === t ? {} : t, (e.isString(t) || e.isNumber(t)) && (t = { space: t }), JSON.stringify(r, t.replacer || this.replacer, t.space || this.space) }, getTypeId: function (e) { return e ? e[this.typeAttribute] : void 0 }, typeMap: {}, registerType: function () { var r = arguments[0]; if (1 == arguments.length) { var t = r[this.typeAttribute] || e.getModuleId(r); this.typeMap[t] = r } else this.typeMap[r] = arguments[1] }, reviver: function (e, r, t, i) { var n = t(r); if (n) { var u = i(n); if (u) return u.fromJSON ? u.fromJSON(r) : new u(r) } return r }, deserialize: function (e, r) { var t = this; r = r || {}; var i = r.getTypeId || function (e) { return t.getTypeId(e) }, n = r.getConstructor || function (e) { return t.typeMap[e] }, u = r.reviver || function (e, r) { return t.reviver(e, r, i, n) }; return JSON.parse(e, u) }, clone: function (e, r) { return this.deserialize(this.serialize(e, r), r) } } });