define(["durandal/system", "knockout"], function (n, i) { function t(i) { return void 0 === i ? { applyBindings: !0 } : n.isBoolean(i) ? { applyBindings: i } : (void 0 === i.applyBindings && (i.applyBindings = !0), i) } function e(e, u, s, l) { if (!u || !s) return void (r.throwOnErrors ? n.error(o) : n.log(o, u, l)); if (!u.getAttribute) return void (r.throwOnErrors ? n.error(d) : n.log(d, u, l)); var p = u.getAttribute("data-view"); try { var b; return e && e.binding && (b = e.binding(u)), b = t(b), r.binding(l, u, b), b.applyBindings ? (n.log("Binding", p, l), i.applyBindings(s, u)) : e && i.utils.domData.set(u, g, { $data: e }), r.bindingComplete(l, u, b), e && e.bindingComplete && e.bindingComplete(u), i.utils.domData.set(u, a, b), b } catch (c) { c.message = c.message + ";\nView: " + p + ";\nModuleId: " + n.getModuleId(l), r.throwOnErrors ? n.error(c) : n.log(c.message) } } var r, o = "Insufficient Information to Bind", d = "Unexpected View Type", a = "durandal-binding-instruction", g = "__ko_bindingContext__"; return r = { binding: n.noop, bindingComplete: n.noop, throwOnErrors: !1, getBindingInstruction: function (n) { return i.utils.domData.get(n, a) }, bindContext: function (n, i, t, r) { return t && n && (n = n.createChildContext(t, "string" == typeof r ? r : null)), e(t, i, n, t || (n ? n.$data : null)) }, bind: function (n, i) { return e(n, i, n, n) } } });