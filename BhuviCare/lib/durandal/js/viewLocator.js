define(["durandal/system", "durandal/viewEngine"], function (e, t) { function r(e, t) { for (var r = 0; r < e.length; r++) { var i = e[r], n = i.getAttribute("data-view"); if (n == t) return i } } function i(e) { return (e + "").replace(/([\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:])/g, "\\$1") } return { useConvention: function (e, t, r) { e = e || "viewmodels", t = t || "views", r = r || t; var n = new RegExp(i(e), "gi"); this.convertModuleIdToViewId = function (e) { return e.replace(n, t) }, this.translateViewIdToArea = function (e, t) { return t && "partial" != t ? r + "/" + t + "/" + e : r + "/" + e } }, locateViewForObject: function (t, r, i) { var n; if (t.getView && (n = t.getView())) return this.locateView(n, r, i); if (t.viewUrl) return this.locateView(t.viewUrl, r, i); var o = e.getModuleId(t); return o ? this.locateView(this.convertModuleIdToViewId(o), r, i) : this.locateView(this.determineFallbackViewId(t), r, i) }, convertModuleIdToViewId: function (e) { return e }, determineFallbackViewId: function (e) { var t = /function (.{1,})\(/, r = t.exec(e.constructor.toString()), i = r && r.length > 1 ? r[1] : ""; return i = i.trim(), "views/" + i }, translateViewIdToArea: function (e, t) { return e }, locateView: function (i, n, o) { if ("string" == typeof i) { var a; if (a = t.isViewUrl(i) ? t.convertViewUrlToViewId(i) : i, n && (a = this.translateViewIdToArea(a, n)), o) { var u = r(o, a); if (u) return e.defer(function (e) { e.resolve(u) }).promise() } return t.createView(a) } return e.defer(function (e) { e.resolve(i) }).promise() } } });